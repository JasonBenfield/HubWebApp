// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using XTI_HubDB.EF;

#nullable disable

namespace XTI_HubDB.EF.SqlServer
{
    [DbContext(typeof(HubDbContext))]
    [Migration("20220430205224_Stored Objects")]
    partial class StoredObjects
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("XTI_HubDB.Entities.AppEntity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset>("TimeAdded")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Title")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasDefaultValue("");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("VersionName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ID");

                    b.HasIndex("Name", "Type")
                        .IsUnique();

                    b.ToTable("Apps", (string)null);
                });

            modelBuilder.Entity("XTI_HubDB.Entities.AppEventEntity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("ActualCount")
                        .HasColumnType("int");

                    b.Property<string>("Caption")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Detail")
                        .IsRequired()
                        .HasMaxLength(32000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventKey")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RequestID")
                        .HasColumnType("int");

                    b.Property<int>("Severity")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("TimeOccurred")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("ID");

                    b.HasIndex("EventKey")
                        .IsUnique();

                    b.HasIndex("RequestID");

                    b.ToTable("Events", (string)null);
                });

            modelBuilder.Entity("XTI_HubDB.Entities.AppRequestEntity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("ActualCount")
                        .HasColumnType("int");

                    b.Property<int>("ModifierID")
                        .HasColumnType("int");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("RequestKey")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ResourceID")
                        .HasColumnType("int");

                    b.Property<int>("SessionID")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("TimeEnded")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("TimeStarted")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("ID");

                    b.HasIndex("ModifierID");

                    b.HasIndex("RequestKey")
                        .IsUnique();

                    b.HasIndex("ResourceID");

                    b.HasIndex("SessionID");

                    b.ToTable("Requests", (string)null);
                });

            modelBuilder.Entity("XTI_HubDB.Entities.AppRoleEntity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("AppID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTimeOffset>("TimeDeactivated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified).AddTicks(9999), new TimeSpan(0, 0, 0, 0, 0)));

                    b.HasKey("ID");

                    b.HasIndex("AppID", "Name")
                        .IsUnique();

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("XTI_HubDB.Entities.AppSessionEntity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("RemoteAddress")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("RequesterKey")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SessionKey")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTimeOffset>("TimeEnded")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("TimeStarted")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UserAgent")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("SessionKey")
                        .IsUnique();

                    b.HasIndex("UserID");

                    b.ToTable("Sessions", (string)null);
                });

            modelBuilder.Entity("XTI_HubDB.Entities.AppUserEntity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTimeOffset>("TimeAdded")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ID");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("XTI_HubDB.Entities.AppUserRoleEntity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("ModifierID")
                        .HasColumnType("int");

                    b.Property<int>("RoleID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ModifierID");

                    b.HasIndex("RoleID");

                    b.HasIndex("UserID");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("XTI_HubDB.Entities.AppXtiVersionEntity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("AppID")
                        .HasColumnType("int");

                    b.Property<int>("VersionID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("VersionID");

                    b.HasIndex("AppID", "VersionID")
                        .IsUnique();

                    b.ToTable("AppXtiVersions", (string)null);
                });

            modelBuilder.Entity("XTI_HubDB.Entities.AuthenticatorEntity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("AppID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("AppID")
                        .IsUnique();

                    b.ToTable("Authenticators", (string)null);
                });

            modelBuilder.Entity("XTI_HubDB.Entities.InstallationEntity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("AppVersionID")
                        .HasColumnType("int");

                    b.Property<string>("Domain")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsCurrent")
                        .HasColumnType("bit");

                    b.Property<int>("LocationID")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("TimeAdded")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("ID");

                    b.HasIndex("AppVersionID");

                    b.HasIndex("LocationID", "AppVersionID", "IsCurrent")
                        .IsUnique();

                    b.ToTable("Installations", (string)null);
                });

            modelBuilder.Entity("XTI_HubDB.Entities.InstallLocationEntity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("QualifiedMachineName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ID");

                    b.HasIndex("QualifiedMachineName")
                        .IsUnique();

                    b.ToTable("InstallLocations", (string)null);
                });

            modelBuilder.Entity("XTI_HubDB.Entities.ModifierCategoryEntity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("AppID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID");

                    b.HasIndex("AppID", "Name")
                        .IsUnique();

                    b.ToTable("ModifierCategories", (string)null);
                });

            modelBuilder.Entity("XTI_HubDB.Entities.ModifierEntity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.Property<string>("DisplayText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModKey")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TargetKey")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ID");

                    b.HasIndex("CategoryID", "ModKey")
                        .IsUnique();

                    b.HasIndex("CategoryID", "TargetKey")
                        .IsUnique();

                    b.ToTable("Modifiers", (string)null);
                });

            modelBuilder.Entity("XTI_HubDB.Entities.ResourceEntity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("GroupID")
                        .HasColumnType("int");

                    b.Property<bool>("IsAnonymousAllowed")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ResultType")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("GroupID", "Name")
                        .IsUnique();

                    b.ToTable("Resources", (string)null);
                });

            modelBuilder.Entity("XTI_HubDB.Entities.ResourceGroupEntity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("AppVersionID")
                        .HasColumnType("int");

                    b.Property<bool>("IsAnonymousAllowed")
                        .HasColumnType("bit");

                    b.Property<int>("ModCategoryID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ID");

                    b.HasIndex("ModCategoryID");

                    b.HasIndex("AppVersionID", "Name")
                        .IsUnique();

                    b.ToTable("ResourceGroups", (string)null);
                });

            modelBuilder.Entity("XTI_HubDB.Entities.ResourceGroupRoleEntity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("GroupID")
                        .HasColumnType("int");

                    b.Property<bool>("IsAllowed")
                        .HasColumnType("bit");

                    b.Property<int>("RoleID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("RoleID");

                    b.HasIndex("GroupID", "RoleID")
                        .IsUnique();

                    b.ToTable("ResourceGroupRoles", (string)null);
                });

            modelBuilder.Entity("XTI_HubDB.Entities.ResourceRoleEntity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<bool>("IsAllowed")
                        .HasColumnType("bit");

                    b.Property<int>("ResourceID")
                        .HasColumnType("int");

                    b.Property<int>("RoleID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("RoleID");

                    b.HasIndex("ResourceID", "RoleID")
                        .IsUnique();

                    b.ToTable("ResourceRoles", (string)null);
                });

            modelBuilder.Entity("XTI_HubDB.Entities.StoredObjectEntity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StorageKey")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("StorageName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTimeOffset>("TimeExpires")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("ID");

                    b.HasIndex("StorageName", "StorageKey")
                        .IsUnique();

                    b.ToTable("StoredObjects", (string)null);
                });

            modelBuilder.Entity("XTI_HubDB.Entities.UserAuthenticatorEntity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("AuthenticatorID")
                        .HasColumnType("int");

                    b.Property<string>("ExternalUserKey")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("AuthenticatorID");

                    b.HasIndex("ExternalUserKey", "AuthenticatorID")
                        .IsUnique();

                    b.HasIndex("UserID", "AuthenticatorID")
                        .IsUnique();

                    b.ToTable("UserAuthenticators", (string)null);
                });

            modelBuilder.Entity("XTI_HubDB.Entities.XtiVersionEntity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Major")
                        .HasColumnType("int");

                    b.Property<int>("Minor")
                        .HasColumnType("int");

                    b.Property<int>("Patch")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("TimeAdded")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("VersionKey")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("VersionName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ID");

                    b.HasIndex("VersionName", "VersionKey")
                        .IsUnique();

                    b.ToTable("XtiVersions", (string)null);
                });

            modelBuilder.Entity("XTI_HubDB.Entities.AppEventEntity", b =>
                {
                    b.HasOne("XTI_HubDB.Entities.AppRequestEntity", null)
                        .WithMany()
                        .HasForeignKey("RequestID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("XTI_HubDB.Entities.AppRequestEntity", b =>
                {
                    b.HasOne("XTI_HubDB.Entities.ModifierEntity", null)
                        .WithMany()
                        .HasForeignKey("ModifierID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("XTI_HubDB.Entities.ResourceEntity", null)
                        .WithMany()
                        .HasForeignKey("ResourceID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("XTI_HubDB.Entities.AppSessionEntity", null)
                        .WithMany()
                        .HasForeignKey("SessionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("XTI_HubDB.Entities.AppRoleEntity", b =>
                {
                    b.HasOne("XTI_HubDB.Entities.AppEntity", null)
                        .WithMany()
                        .HasForeignKey("AppID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("XTI_HubDB.Entities.AppSessionEntity", b =>
                {
                    b.HasOne("XTI_HubDB.Entities.AppUserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("XTI_HubDB.Entities.AppUserRoleEntity", b =>
                {
                    b.HasOne("XTI_HubDB.Entities.ModifierEntity", null)
                        .WithMany()
                        .HasForeignKey("ModifierID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("XTI_HubDB.Entities.AppRoleEntity", null)
                        .WithMany()
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("XTI_HubDB.Entities.AppUserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("XTI_HubDB.Entities.AppXtiVersionEntity", b =>
                {
                    b.HasOne("XTI_HubDB.Entities.AppEntity", null)
                        .WithMany()
                        .HasForeignKey("AppID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("XTI_HubDB.Entities.XtiVersionEntity", null)
                        .WithMany()
                        .HasForeignKey("VersionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("XTI_HubDB.Entities.AuthenticatorEntity", b =>
                {
                    b.HasOne("XTI_HubDB.Entities.AppEntity", null)
                        .WithMany()
                        .HasForeignKey("AppID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("XTI_HubDB.Entities.InstallationEntity", b =>
                {
                    b.HasOne("XTI_HubDB.Entities.AppXtiVersionEntity", null)
                        .WithMany()
                        .HasForeignKey("AppVersionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("XTI_HubDB.Entities.InstallLocationEntity", null)
                        .WithMany()
                        .HasForeignKey("LocationID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("XTI_HubDB.Entities.ModifierCategoryEntity", b =>
                {
                    b.HasOne("XTI_HubDB.Entities.AppEntity", null)
                        .WithMany()
                        .HasForeignKey("AppID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("XTI_HubDB.Entities.ModifierEntity", b =>
                {
                    b.HasOne("XTI_HubDB.Entities.ModifierCategoryEntity", null)
                        .WithMany()
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("XTI_HubDB.Entities.ResourceEntity", b =>
                {
                    b.HasOne("XTI_HubDB.Entities.ResourceGroupEntity", null)
                        .WithMany()
                        .HasForeignKey("GroupID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("XTI_HubDB.Entities.ResourceGroupEntity", b =>
                {
                    b.HasOne("XTI_HubDB.Entities.AppXtiVersionEntity", null)
                        .WithMany()
                        .HasForeignKey("AppVersionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("XTI_HubDB.Entities.ModifierCategoryEntity", null)
                        .WithMany()
                        .HasForeignKey("ModCategoryID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("XTI_HubDB.Entities.ResourceGroupRoleEntity", b =>
                {
                    b.HasOne("XTI_HubDB.Entities.ResourceGroupEntity", null)
                        .WithMany()
                        .HasForeignKey("GroupID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("XTI_HubDB.Entities.AppRoleEntity", null)
                        .WithMany()
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("XTI_HubDB.Entities.ResourceRoleEntity", b =>
                {
                    b.HasOne("XTI_HubDB.Entities.ResourceEntity", null)
                        .WithMany()
                        .HasForeignKey("ResourceID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("XTI_HubDB.Entities.AppRoleEntity", null)
                        .WithMany()
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("XTI_HubDB.Entities.UserAuthenticatorEntity", b =>
                {
                    b.HasOne("XTI_HubDB.Entities.AuthenticatorEntity", null)
                        .WithMany()
                        .HasForeignKey("AuthenticatorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("XTI_HubDB.Entities.AppUserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
